/* eslint-disable @typescript-eslint/no-var-requires */
// Generated by CodiumAI

import { useHandleNavigate } from '@hooks/useHandleNavigate'
import PathRoutes from '@route/PathRoutes'
import { store } from '@store/index'
import useHandleLogout from '.'

describe('useHandleLogout', () => {
  // Test that the 'handleLogout' function calls the 'clearStore' function
  it('should call clearStore when handleLogout is called', () => {
    const mockClearStore = jest.fn()
    jest.mock('@store/index', () => ({
      clearStore: mockClearStore,
    }))

    const { handleLogout } = useHandleLogout()
    handleLogout()

    expect(mockClearStore).toHaveBeenCalled()
  })

  // Test that the 'clearStorage' function is called when the 'handleLogout' function is invoked
  it('should call clearStorage when handleLogout is invoked', async () => {
    const mockClearStorage = jest.spyOn(global.Storage.prototype, 'clear')
    const { handleLogout } = useHandleLogout()

    await handleLogout()

    expect(mockClearStorage).toHaveBeenCalled()
  })

  // Test that the 'handleLogout' function calls the 'handleNavigate' function with the 'PathRoutes.HOME' argument
  it('should call handleNavigate with PathRoutes.HOME argument', () => {
    const handleNavigateMock = jest.fn()
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: handleNavigateMock,
      }),
    }))

    const { handleLogout } = require('./useHandleLogout')

    handleLogout()

    expect(handleNavigateMock).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the 'handleNavigate' function is called with the correct argument when the 'handleLogout' function is invoked
  it('should call handleNavigate with PathRoutes.HOME when handleLogout is invoked', () => {
    const mockHandleNavigate = jest.fn()
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))
    const { handleLogout } = require('./useHandleLogout')

    handleLogout()

    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the 'handleLogout' function calls 'clearStore' and 'handleNavigate' with the correct arguments, and handles any errors thrown by 'clearStore'.
  it('should call clearStore and handleNavigate with the correct arguments and handle errors', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest
      .spyOn(global.Storage.prototype, 'clear')
      .mockImplementation(() => {})
    const mockClearStore = jest
      .spyOn(store, 'dispatch')
      .mockImplementation(() => {
        throw new Error('Error in clearStore')
      })

    const { handleLogout } = useHandleLogout()

    await expect(handleLogout()).rejects.toThrow('Error in clearStore')

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)

    mockClearStorage.mockRestore()
    mockClearStore.mockRestore()
  })

  // Test that the 'handleLogout' function calls 'clearStorage' and 'clearStore', and then calls 'handleNavigate' with the 'HOME' path.
  it('should call clearStorage, clearStore, and handleNavigate with HOME path when handleLogout is called', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest
      .spyOn(global.localStorage, 'clear')
      .mockImplementation(() => {
        throw new Error('Error clearing storage')
      })
    const mockClearStore = jest.spyOn(store, 'dispatch')

    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    const { handleLogout } = require('./useHandleLogout')

    await expect(handleLogout()).rejects.toThrow('Error clearing storage')

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the 'handleNavigate' function is called with different arguments
  it('should call handleNavigate with different arguments when handleLogout is called', () => {
    const mockHandleNavigate = jest.fn()
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))
    const { handleLogout } = require('./useHandleLogout')

    handleLogout()

    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the handleLogout function is called multiple times in a row and performs the expected actions
  it('should call handleLogout multiple times in a row', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest.spyOn(window.localStorage, 'clear')
    const mockClearStore = jest.fn()

    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    jest.mock('@store/index', () => ({
      clearStorage: mockClearStorage,
      clearStore: mockClearStore,
    }))

    const { handleLogout } = require('./useHandleLogout')

    await handleLogout()
    expect(mockClearStorage).toHaveBeenCalledTimes(1)
    expect(mockClearStore).toHaveBeenCalledTimes(1)
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)

    await handleLogout()
    expect(mockClearStorage).toHaveBeenCalledTimes(2)
    expect(mockClearStore).toHaveBeenCalledTimes(2)
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)

    await handleLogout()
    expect(mockClearStorage).toHaveBeenCalledTimes(3)
    expect(mockClearStore).toHaveBeenCalledTimes(3)
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the 'handleLogout' function calls 'handleNavigate' with the correct argument after clearing the storage and store
  it('should call handleNavigate with the correct argument after clearing the storage and store', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest
      .spyOn(global.Storage.prototype, 'clear')
      .mockImplementation(() => {})
    const mockClearStore = jest.fn()

    jest.doMock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    jest.doMock('@store/index', () => ({
      clearStorage: mockClearStorage,
      clearStore: mockClearStore,
    }))

    const { useHandleLogout } = require('./useHandleLogout')
    const { handleLogout } = useHandleLogout()

    await handleLogout()

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the handleLogout function calls clearStorage, clearStore, and handleNavigate with the correct arguments
  it('should call clearStorage, clearStore, and handleNavigate with the correct arguments', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest.fn()
    const mockClearStore = jest.fn()

    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    jest.mock('@store/index', () => ({
      clearStorage: mockClearStorage,
      clearStore: mockClearStore,
    }))

    const { handleLogout } = require('./useHandleLogout')

    await handleLogout()

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the handleLogout function calls clearStorage, clearStore, and handleNavigate with the correct arguments when clearStore returns an error
  it('should call clearStorage, clearStore, and handleNavigate with the correct arguments when clearStore returns an error', async () => {
    // Mock clearStore to return an error
    clearStore.mockImplementation(() => {
      throw new Error('Clear store error')
    })

    // Mock handleNavigate
    const handleNavigateMock = jest.fn()
    useHandleNavigate.mockReturnValue({ handleNavigate: handleNavigateMock })

    // Call handleLogout
    await useHandleLogout.handleLogout()

    // Expectations
    expect(clearStorage).toHaveBeenCalled()
    expect(clearStore).toHaveBeenCalled()
    expect(handleNavigateMock).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the 'handleNavigate' function is not called if the 'clearStorage' function throws an error
  it('should not call handleNavigate when clearStorage throws an error', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest
      .spyOn(global.Storage.prototype, 'clear')
      .mockImplementation(() => {
        throw new Error('Error clearing storage')
      })

    const { handleLogout } = useHandleLogout()
    const { handleNavigate } = useHandleNavigate()

    jest
      .spyOn(useHandleNavigate, 'useHandleNavigate')
      .mockReturnValue({ handleNavigate: mockHandleNavigate })

    await handleLogout()

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockHandleNavigate).not.toHaveBeenCalledWith(PathRoutes.HOME)

    mockClearStorage.mockRestore()
  })

  // Test that the 'handleNavigate' function is not called if the 'clearStore' function throws an error
  it('should not call handleNavigate when clearStore throws an error', async () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest
      .spyOn(global.Storage.prototype, 'clear')
      .mockImplementation(() => {
        throw new Error('Error clearing storage')
      })
    const mockClearStore = jest
      .spyOn(global, 'clearStore')
      .mockImplementation(() => {
        throw new Error('Error clearing store')
      })

    const { handleLogout } = useHandleLogout()
    const { handleNavigate } = useHandleNavigate()

    jest.spyOn(React, 'useCallback').mockImplementation((callback) => callback)

    await expect(handleLogout()).rejects.toThrow('Error clearing store')

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).not.toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the handleLogout function calls clearStorage and clearStore, and then navigates to the home page when clearStorage returns an error
  it('should call clearStorage, clearStore, and navigate to home page when clearStorage returns an error', async () => {
    // Mock clearStorage to return an error
    jest.spyOn(window.localStorage, 'clear').mockImplementation(() => {
      throw new Error('Error clearing storage')
    })

    // Mock clearStore
    const mockClearStore = jest.fn()
    jest.mock('@store/index', () => ({
      clearStore: mockClearStore,
    }))

    // Mock handleNavigate
    const mockHandleNavigate = jest.fn()
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    // Import the function to be tested after mocking
    const { useHandleLogout } = require('./useHandleLogout')

    // Call the function to be tested
    const { handleLogout } = useHandleLogout()
    await handleLogout()

    // Assertions
    expect(window.localStorage.clear).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the 'handleNavigate' function is not called if both the 'clearStorage' and 'clearStore' functions throw errors
  it('should not call handleNavigate when clearStorage and clearStore throw errors', async () => {
    // Mock the clearStorage function to throw an error
    clearStorage.mockImplementation(() => {
      throw new Error('Error clearing storage')
    })

    // Mock the clearStore function to throw an error
    clearStore.mockImplementation(() => {
      throw new Error('Error clearing store')
    })

    // Mock the handleNavigate function
    const handleNavigate = jest.fn()

    // Call the useHandleLogout function
    const { handleLogout } = useHandleLogout()

    // Call the handleLogout function
    await handleLogout()

    // Expect that clearStorage and clearStore have been called
    expect(clearStorage).toHaveBeenCalled()
    expect(clearStore).toHaveBeenCalled()

    // Expect that handleNavigate has not been called
    expect(handleNavigate).not.toHaveBeenCalled()
  })

  // Test that the handleNavigate function is called with PathRoutes.HOME after the clearStorage and clearStore functions are called
  it('should call handleNavigate with PathRoutes.HOME after calling clearStorage and clearStore', () => {
    const mockHandleNavigate = jest.fn()
    const mockClearStorage = jest.fn()
    const mockClearStore = jest.fn()

    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    jest.mock('@store/index', () => ({
      clearStorage: mockClearStorage,
      clearStore: mockClearStore,
    }))

    const { handleLogout } = require('./useHandleLogout')

    handleLogout()

    expect(mockClearStorage).toHaveBeenCalled()
    expect(mockClearStore).toHaveBeenCalled()
    expect(mockHandleNavigate).toHaveBeenCalledWith(PathRoutes.HOME)
  })

  // Test that the handleLogout function is called with useCallback and performs the expected actions.
  it('should call handleLogout with useCallback', () => {
    // Mock dependencies
    const handleNavigateMock = jest.fn()
    const useHandleNavigateMock = jest
      .fn()
      .mockReturnValue({ handleNavigate: handleNavigateMock })
    const clearStorageMock = jest.fn()
    const clearStoreMock = jest.fn()

    // Mock imports
    jest.doMock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: useHandleNavigateMock,
    }))
    jest.doMock('@store/index', () => ({
      clearStorage: clearStorageMock,
      clearStore: clearStoreMock,
    }))
    jest.doMock('@route/PathRoutes', () => ({
      ...PathRoutes,
    }))

    // Import the module under test after mocking
    const { useHandleLogout } = require('./useHandleLogout')

    // Call the function under test
    const { handleLogout } = useHandleLogout()

    // Assert that the handleNavigate function is called with the correct argument
    handleLogout()
    expect(handleNavigateMock).toHaveBeenCalledWith(PathRoutes.HOME)

    // Assert that the clearStorage and clearStore functions are called
    expect(clearStorageMock).toHaveBeenCalled()
    expect(clearStoreMock).toHaveBeenCalled()
  })
})
