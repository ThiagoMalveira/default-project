/* eslint-disable no-import-assign */
// Generated by CodiumAI

import { useAppSelector } from '@hooks/store'
import useIsAuthenticated from '.'

describe('useAuthenticated', () => {
  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to true when credentials are present
  it('should return an object with Authenticated property set to true when credentials are present', () => {
    // Arrange
    const credentials = { email: 'thiago@email.com', password: '123456' }
    const state = { auth: { credentials } }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    const originalUseSelector = useAppSelector
    useAppSelector = useSelectorMock

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result).toEqual({ Authenticated: true })

    // Restore
    useAppSelector = originalUseSelector
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when credentials are not present
  it('should return an object with Authenticated property set to false when credentials are not present', () => {
    // Arrange
    const state = {
      auth: {
        credentials: null,
      },
    }
    useAppSelector.mockImplementation((selector) => selector(state))

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result.isAuthenticated).toBe(false)
  })

  // Test that the 'useAuthenticated' function returns an object with the 'Authenticated' property set to false when the 'credentials' are null.
  it('should return an object with Authenticated property set to false when credentials are null', () => {
    // Arrange
    const state = {
      auth: {
        credentials: null,
      },
    }
    useAppSelector.mockImplementation((selector) => selector(state))

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result.isAuthenticated).toBe(false)
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when the 'credentials' are an empty object.
  it('should return an object with Authenticated property set to false when credentials are an empty object', () => {
    // Arrange
    const credentials = {}
    const state = { auth: { credentials } }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    const originalUseSelector = useAppSelector
    useAppSelector = useSelectorMock

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result.isAuthenticated).toBe(false)

    // Restore
    useAppSelector = originalUseSelector
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when the 'credentials' are undefined.
  it('should return an object with Authenticated property set to false when credentials are undefined', () => {
    // Arrange
    const state = {
      auth: {
        credentials: undefined,
      },
    }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    const useAppSelectorMock = jest
      .spyOn(storeHooks, 'useAppSelector')
      .mockImplementation(useSelectorMock)

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result).toEqual({ Authenticated: false })
    expect(useSelectorMock).toHaveBeenCalledWith(expect.any(Function))
    expect(useAppSelectorMock).toHaveBeenCalled()

    // Clean up
    useAppSelectorMock.mockRestore()
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when the 'credentials' are a number
  it('should return an object with Authenticated property set to false when credentials are a number', () => {
    // Arrange
    const credentials = 12345
    const state = { auth: { credentials } }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    jest.mock('@hooks/store', () => ({
      useAppSelector: useSelectorMock,
    }))

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result).toEqual({ Authenticated: false })
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when the 'credentials' are an empty string.
  it('should return an object with Authenticated property set to false when credentials are an empty string', () => {
    // Arrange
    const state = {
      auth: {
        credentials: '',
      },
    }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    const originalUseAppSelector = useAppSelector
    useAppSelector = useSelectorMock

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result.isAuthenticated).toBe(false)

    // Restore
    useAppSelector = originalUseAppSelector
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when the 'credentials' are an empty array.
  it('should return an object with Authenticated property set to false when credentials are an empty array', () => {
    // Arrange
    const state = {
      auth: {
        credentials: [],
      },
    }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    const originalUseAppSelector = useAppSelector
    useAppSelector = useSelectorMock

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(result.isAuthenticated).toBe(false)

    // Restore
    useAppSelector = originalUseAppSelector
  })

  // Test that the function 'useAuthenticated' returns an object with the 'Authenticated' property set to false when the 'credentials' are a boolean value
  it('should return an object with Authenticated property set to false when credentials are a boolean', () => {
    // Arrange
    const credentials = true
    const state = { auth: { credentials } }
    const useSelectorMock = jest.fn().mockReturnValue(state)
    const useAppSelectorMock = jest
      .spyOn(hooks, 'useAppSelector')
      .mockReturnValue(useSelectorMock)

    // Act
    const result = useIsAuthenticated()

    // Assert
    expect(useAppSelectorMock).toHaveBeenCalledWith(expect.any(Function))
    expect(result).toEqual({ Authenticated: false })
  })
})
