/* eslint-disable @typescript-eslint/no-var-requires */
// Generated by CodiumAI

import { it } from 'node:test'
import { useGoBack } from '.'

describe('useGoBack', () => {
  // Test that the useGoBack function returns an object with a handleGoBack function
  it('should return an object with handleGoBack function', () => {
    const goBack = useGoBack()
    expect(goBack).toHaveProperty('handleGoBack')
    expect(typeof goBack.handleGoBack).toBe('function')
  })

  // Test that the handleGoBack function calls useNavigate with -1 as argument
  it('should call useNavigate with -1 as argument when handleGoBack is called', () => {
    const navigateMock = jest.fn()
    jest.mock('react-router-dom', () => ({
      useNavigate: () => navigateMock,
    }))

    const { handleGoBack } = useGoBack()
    handleGoBack()

    expect(navigateMock).toHaveBeenCalledWith(-1)
  })

  // Test that the handleGoBack function navigates back by calling the navigate function with -1 as the argument.
  it('should navigate back when handleGoBack is called', () => {
    const navigateMock = jest.fn()
    jest.mock('react-router-dom', () => ({
      useNavigate: () => navigateMock,
    }))

    const { handleGoBack } = require('./useGoBack')

    handleGoBack()

    expect(navigateMock).toHaveBeenCalledWith(-1)
  })

  // Test that the handleGoBack function can be called multiple times
  it('should call handleGoBack multiple times', () => {
    const navigateMock = jest.fn()
    jest.mock('react-router-dom', () => ({
      useNavigate: () => navigateMock,
    }))

    const { handleGoBack } = require('./useGoBack')

    handleGoBack()
    handleGoBack()
    handleGoBack()

    expect(navigateMock).toHaveBeenCalledTimes(3)
    expect(navigateMock).toHaveBeenCalledWith(-1)
  })

  // Test that the handleGoBack function can be used with other navigate functions
  it('should navigate back when handleGoBack is called', () => {
    const navigate = jest.fn()
    jest.mock('react-router-dom', () => ({
      useNavigate: () => navigate,
    }))

    const { handleGoBack } = require('./useGoBack')

    handleGoBack()

    expect(navigate).toHaveBeenCalledWith(-1)
  })

  // Test that the handleGoBack function navigates to the previous page
  it('should navigate to previous page when handleGoBack is called', () => {
    // Mock the useNavigate function
    const mockNavigate = jest.fn()
    jest.mock('react-router-dom', () => ({
      useNavigate: () => mockNavigate,
    }))

    // Import the useGoBack function
    const { useGoBack } = require('./useGoBack')

    // Call the useGoBack function
    const { handleGoBack } = useGoBack()

    // Call the handleGoBack function
    handleGoBack()

    // Expect the navigate function to be called with -1
    expect(mockNavigate).toHaveBeenCalledWith(-1)
  })

  // Test that the useNavigate function is called only once when the handleGoBack function is invoked.
  it('should call useNavigate only once when handleGoBack is invoked', () => {
    const navigateMock = jest.fn()
    jest.mock('react-router-dom', () => ({
      useNavigate: () => navigateMock,
    }))

    const { handleGoBack } = require('./useGoBack')

    handleGoBack()

    expect(navigateMock).toHaveBeenCalledTimes(1)
  })
})
