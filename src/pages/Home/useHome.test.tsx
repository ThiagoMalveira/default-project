// Generated by CodiumAI

import useHome from './useHome'

describe('useHome', () => {
  // Test that the useHome function returns an object with a handleNavigate function
  it('should return an object with a handleNavigate function', () => {
    const { handleNavigate } = useHome()
    expect(typeof handleNavigate).toBe('function')
  })

  // Test that the handleNavigate function calls the navigate function from useHandleNavigate with a string argument
  it('should call navigate function with a string argument when handleNavigate is called', () => {
    const navigateMock = jest.fn()
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        navigate: navigateMock,
      }),
    }))

    const { handleNavigate } = require('./useHome')

    handleNavigate('example')

    expect(navigateMock).toHaveBeenCalledWith('example')
  })

  // Test that the handleNavigate function throws an error when the useHandleNavigate's navigate function throws an error
  it('should throw an error when navigate function throws an error', () => {
    const mockNavigate = jest.fn(() => {
      throw new Error('Navigation error')
    })
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: jest.fn(),
        navigate: mockNavigate,
      }),
    }))

    const { handleNavigate } = require('./useHome')

    expect(() => {
      handleNavigate('item')
    }).toThrow('Navigation error')
  })

  // Test that the handleNavigate function in useHome calls the handleNavigate function in useHandleNavigate with a string argument
  it('should call handleNavigate in useHandleNavigate with a string argument when handleNavigate is called in useHome', () => {
    const mockHandleNavigate = jest.fn()
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: () => ({
        handleNavigate: mockHandleNavigate,
      }),
    }))

    const { handleNavigate } = require('./useHome')
    handleNavigate('example')

    expect(mockHandleNavigate).toHaveBeenCalledWith('example')
  })

  // Test that the returned object from useHome only contains the handleNavigate function when useHandleNavigate returns an object with additional properties
  it('should return an object with only handleNavigate function when useHandleNavigate returns an object with additional properties', () => {
    // Mock the useHandleNavigate function
    jest.mock('@hooks/useHandleNavigate', () => ({
      __esModule: true,
      default: jest.fn(() => ({
        handleNavigate: jest.fn(),
        additionalProperty: 'additional property',
      })),
    }))

    // Import the useHome function
    const useHome = require('./useHome').default

    // Call the useHome function
    const result = useHome()

    // Assert that the returned object only contains the handleNavigate function
    expect(result).toEqual({
      handleNavigate: expect.any(Function),
    })
  })

  // Test that the handleNavigate function returns undefined when useHandleNavigate returns undefined
  it('should return undefined when useHandleNavigate returns undefined', () => {
    const mockUseHandleNavigate = jest.fn(() => ({ handleNavigate: undefined }))
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: mockUseHandleNavigate,
    }))

    const { handleNavigate } = require('./useHome')

    expect(handleNavigate()).toBeUndefined()
  })

  // Test that the function 'useHome' returns an object with additional properties when the function 'useHandleNavigate' returns an object with additional properties.
  it('should return an object with additional properties when useHandleNavigate returns an object with additional properties', () => {
    // Mock the useHandleNavigate function
    jest.mock('@hooks/useHandleNavigate', () => ({
      useHandleNavigate: jest.fn(() => ({
        handleNavigate: jest.fn(),
        additionalProperty: 'additionalValue',
      })),
    }))

    // Import the useHome function
    const useHome = require('./useHome').default

    // Call the useHome function
    const result = useHome()

    // Assert that the result contains the handleNavigate property
    expect(result).toHaveProperty('handleNavigate')

    // Assert that the result contains the additionalProperty property
    expect(result).toHaveProperty('additionalProperty', 'additionalValue')
  })
})
